### This file will help move the player across the board game. 


# import python packages
import random 

#import py files
from deck import DeckClass
from player import Player
from card import Card


# class: HpBoard
class HpBoard(Player, DeckClass, Card):
    '''This class will help move the players at different
    points of the game until the end.'''
    # Define the class variables (or should it be self variables?)
    
    # initalize: 
    def __init__(self):
        self.space_0 = 128
        self.space_1 = 134
        self.space_2 = 140
        self.space_3 = 146
        self.space_4 = 152
        self.space_5 = 158
        self.space_6 = 164
        self.space_7 = 170
        self.space_8 = 176
        self.space_9 = 182
        self.board = """
_____________________________________________________________
|     |     |     |     |     |     |     |     |     |     |
|     |     |     |     |     |     |     |     |     |     |
|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|

"""
    # __repr__ to print self  
    def __repr__(self):
        '''This will print the board; more for development purposes.'''
        return print(self.board)
    
    # method: board_print
    def board_print(self):
        '''This function will print the HpBoard instance.'''
        return print(str(self.board))

    # method: start_game 
    def start_game(self):
        '''This function will start the game by placing the player, 
        represented by an * in the first square.'''
        self.board = self.board[:self.space_0] + '*' + self.board[self.space_0 +1:]
        return print(self.board)     
        
    # method: start_turn
    def start_turn(self, p_house, proper_deck):
        '''This function will first find the house of the player
        and call in the appropriate deck. Then the deck needs to
        be shuffled. Finally a card is drawn and printed to the user.'''
        # need to get the house of the player 
        turn_house = p_house
        # get the proper deck 
        #DeckClass.shuffle_deck(proper_deck)
        proper_deck.shuffle_deck()
        # draw card
        move_card = proper_deck.draw_card()
        #print_the_card = move_card.card_print()
        return (move_card)
        
    # method: move_turn 
    def move_turn(self, card_value):
        '''This function will call the value from the drawn card 
        in the function above, multiply it by 6 to get the number
        of indexes we need to move the * in the board string to
        get the * in the right box.'''
        
        # multiple value by 6
        in_to_change = card_value * 6
        # find current index of *
        cur_in = self.board.find('*')
        # replace the old * with blank 
        self.board = self.board[:cur_in] + ' ' + self.board[cur_in +1:]
        # add in the * in the new spot 
        new_in = cur_in + in_to_change
        # check if player can move forward
        if new_in > 182 or new_in < 128:
            self.board = self.board[:cur_in] + '*' + self.board[cur_in +1:]
            print("Sorry! There are not enough spaces left on the board to move. \n You will have to stay put for this turn.")
        else:
            self.board = self.board[:new_in] + '*' + self.board[new_in +1:]
        # print the board
        return print(self.board)    
    
    # method: player_won
    def player_won(self):
        '''This function checks whether a player has 
        reach the last place and won after their turn.'''
        return self.board[182] == '*'
    
    # method: player_lost 
    def player_lost(self, proper_deck):
        '''This function checks whether a player has
        run out of cards and thus lost after their turn.'''
        return proper_deck.deck_empty()